[{"name":"app.R","content":"library(shiny)\nlibrary(shinydashboard)\nlibrary(dplyr)\nlibrary(shinycssloaders)\n\nsource(\"intro/intro.R\")\nsource(\"module1/module1.R\")\nsource(\"module2/module2.R\")\n\nSidebarMenu <- sidebarMenu(intro.menu, module1.menu, module2.menu)\nTabItems <- tabItems(intro.tab, module1.tab, module2.tab)\n\nui <- dashboardPage(\n  dashboardHeader(title = \"Shiny Modules\"),\n  dashboardSidebar(collapsed = TRUE, SidebarMenu),\n  dashboardBody(TabItems)\n)\n\nserver <- function(input, output){\n  intro.text(input, output)\n  module1.plot1(input, output)\n  module2.plot1(input, output)\n}\n\nshinyApp(ui, server)","type":"text"},{"name":"README.md","content":"### 'Modularized' tabs in Shiny\n\nThis repository shows a method to 'modularize' tabs in Shiny dashboard for easy access and clearer management system. Click [here](https://ft3pi.shinyapps.io/shiny-modularized-tabs/) to see the demo.\n\nThis shiny dashboard contains three 'modules': ```Introduction```, ```Module 1``` and ```Module 2```.\n\nEach module has its own folder and R script that is connected to ```app.R```. User can focus on editing one module by accessing all materials in the corresponding folder, without making any changes in ```app.R```.\n\nNote that all objects in each module will be loaded in the environment once the shiny application is closed.\n","type":"text"},{"name":"intro/intro.R","content":"# Introduction\n\nintro.menu <- menuItem(text = \"Introduction\", tabName = \"intro\")\n\nintro.tab <- tabItem(tabName = \"intro\", \n                     h2(\"Introduction\"),\n                     p(\"Welcome!\"),\n                     p(\"This shiny wesbite shows how to modularize tabs in separate sections ('Module 1' & 'Module 2'), such that app.R looks clear and reader-friendly.\"),\n                     p(\"Each module has its own folder and connections to app.R, therefore it allows users to work on separate R scripts for changes instead of doing so in app.R.\"),\n                     verbatimTextOutput(\"code\")\n                     \n)\n\nintro.text <- function(input, output){\n  output$code <- renderPrint({\n    cat(as.character(parse(file = \"app.R\")), sep = \"\\n\")\n  })\n}","type":"text"},{"name":"module1/module1.R","content":"# Module 1\r\n\r\n# ui ----------------------------------------------------------------------\r\n\r\nmodule1.menu <- menuItem(text = \"Module 1\", tabName = \"module1\")\r\n\r\nmodule1.tab <- tabItem(tabName = \"module1\", h2(\"Module 1\"),\r\n                       p(\"This is Module 1.\"),\r\n                       fluidRow(\r\n                         box(plotOutput(\"plot1\", height = 250))%>% withSpinner(color=\"#0dc5c1\"),\r\n                         box(title = \"Controls\", sliderInput(\"slider\", \"Number of observations:\", 1, 100, 50))\r\n                         )\r\n                       )\r\n\r\n\r\n# server ------------------------------------------------------------------\r\n\r\nmodule1.plot1 <- function(input, output){\r\n  set.seed(122)\r\n  histdata <- rnorm(500)\r\n  \r\n  output$plot1 <- renderPlot({\r\n    data <- histdata[seq_len(input$slider)]\r\n    hist(data)\r\n  })\r\n}","type":"text"},{"name":"module2/module2.R","content":"# Module 2\r\n\r\n# ui ----------------------------------------------------------------------\r\n\r\nmodule2.menu <- menuItem(text = \"Module 2\", tabName = \"module2\")\r\n\r\nmodule2.tab <- tabItem(tabName = \"module2\", h2(\"Module 2\"),\r\n                       p(\"This is Module 2.\"),\r\n                       fluidRow(\r\n                         box(sliderInput(\"bins\", \"Number of bins:\", min = 1, max = 50, value = 30)),\r\n                         box(plotOutput(\"plot2\"))%>% withSpinner(color=\"#0dc5c1\")\r\n                         )\r\n                       )\r\n\r\n\r\n# server ------------------------------------------------------------------\r\n\r\nmodule2.plot1 <- function(input, output){\r\n  output$plot2 <- renderPlot({\r\n    # generate bins based on input$bins from ui.R\r\n    x    <- faithful[, 2]\r\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\r\n    \r\n    # draw the histogram with the specified number of bins\r\n    hist(x, breaks = bins, col = 'darkgray', border = 'white',\r\n         xlab = 'Waiting time to next eruption (in mins)',\r\n         main = 'Histogram of waiting times')\r\n  })\r\n}","type":"text"},{"name":"shiny-modularized-tabs.Rproj","content":"Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n","type":"text"}]
